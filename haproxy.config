global
  #maxconn 20000


   nbproc  2

   cpu-map  1 0

   cpu-map  2 1

   stats bind-process 2



   tune.ssl.cachesize 1500000



   maxconn 500000


  daemon
  ca-base /etc/ssl
  crt-base /etc/ssl
  stats socket /var/lib/haproxy/run/haproxy.sock mode 600 level admin expose-fd listeners
  stats timeout 2m

  # Increase the default request size to be comparable to modern cloud load balancers (ALB: 64kb), affects
  # total memory use when large numbers of connections are open.
  tune.maxrewrite 8192
  tune.bufsize 32768

  # Prevent vulnerability to POODLE attacks
  ssl-default-bind-options no-sslv3

# The default cipher suite can be selected from the three sets recommended by https://wiki.mozilla.org/Security/Server_Side_TLS,
# or the user can provide one using the ROUTER_CIPHERS environment variable.
# By default when a cipher set is not provided, intermediate is used.
  # Intermediate cipher suite (default) from https://wiki.mozilla.org/Security/Server_Side_TLS
  tune.ssl.default-dh-param 2048
  ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
  

defaults
  #maxconn 20000
  maxconn 500000

  # Add x-forwarded-for header.

  # To configure custom default errors, you can either uncomment the
  # line below (server ... 127.0.0.1:8080) and point it to your custom
  # backend service or alternatively, you can send a custom 503 error.
  #
  # server openshift_backend 127.0.0.1:8080
  errorfile 503 /var/lib/haproxy/conf/error-page-503.http

  timeout connect 5s
  timeout client 30s
  timeout client-fin 1s
  timeout server 30s
  timeout server-fin 1s
  timeout http-request 10s
  timeout http-keep-alive 300s

  # Long timeout for WebSocket connections.
  timeout tunnel 1h



frontend public
    
  bind :80
  mode http
  tcp-request inspect-delay 5s
  tcp-request content accept if HTTP
  monitor-uri /_______internal_router_healthz

  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy

  # DNS labels are case insensitive (RFC 4343), we need to convert the hostname into lowercase
  # before matching, or any requests containing uppercase characters will never match.
  http-request set-header Host %[req.hdr(Host),lower]

  # check if we need to redirect/force using https.
  acl secure_redirect base,map_reg(/var/lib/haproxy/conf/os_route_http_redirect.map) -m found
  redirect scheme https if secure_redirect

  # map to http backend [or edge/reencrypt route exposed insecurely].
  # Search from most specific to general path (host case).
  # Note: If no match, haproxy uses the default_backend, no other
  #       use_backend directives below this will be processed.
  use_backend %[base,map_reg(/var/lib/haproxy/conf/os_http_be.map)]

  default_backend openshift_default

# public ssl accepts all connections and isn't checking certificates yet certificates to use will be
# determined by the next backend in the chain which may be an app backend (passthrough termination) or a backend
# that terminates encryption in this router (edge)
frontend public_ssl
    
  bind :443
  tcp-request  inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }

  # if the connection is SNI and the route is a passthrough don't use the termination backend, just use the tcp backend
  # for the SNI case, we also need to compare it in case-insensitive mode (by converting it to lowercase) as RFC 4343 says
  acl sni req.ssl_sni -m found
  acl sni_passthrough req.ssl_sni,lower,map_reg(/var/lib/haproxy/conf/os_sni_passthrough.map) -m found
  use_backend be_tcp:%[req.ssl_sni,lower,map_reg(/var/lib/haproxy/conf/os_tcp_be.map)] if sni sni_passthrough

  # if the route is SNI and NOT passthrough enter the termination flow
  use_backend be_sni if sni

  # non SNI requests should enter a default termination backend rather than the custom cert SNI backend since it
  # will not be able to match a cert to an SNI host
  default_backend be_no_sni

##########################################################################
# TLS SNI
#
# When using SNI we can terminate encryption with custom certificates.
# Certs will be stored in a directory and will be matched with the SNI host header
# which must exist in the CN of the certificate.  Certificates must be concatenated
# as a single file (handled by the plugin writer) per the haproxy documentation.
#
# Finally, check re-encryption settings and re-encrypt or just pass along the unencrypted
# traffic
##########################################################################
backend be_sni
  server fe_sni 127.0.0.1:10444 weight 1 send-proxy

frontend fe_sni
  # terminate ssl on edge
  bind 127.0.0.1:10444 ssl no-sslv3 crt /etc/pki/tls/private/tls.crt crt-list /var/lib/haproxy/conf/cert_config.map accept-proxy
  mode http

  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy

  # DNS labels are case insensitive (RFC 4343), we need to convert the hostname into lowercase
  # before matching, or any requests containing uppercase characters will never match.
  http-request set-header Host %[req.hdr(Host),lower]

  # check re-encrypt backends first - from most specific to general path.
  acl reencrypt base,map_reg(/var/lib/haproxy/conf/os_reencrypt.map) -m found

  # Search from most specific to general path (host case).
  use_backend be_secure:%[base,map_reg(/var/lib/haproxy/conf/os_reencrypt.map)] if reencrypt

  # map to http backend
  # Search from most specific to general path (host case).
  # Note: If no match, haproxy uses the default_backend, no other
  #       use_backend directives below this will be processed.
  use_backend be_edge_http:%[base,map_reg(/var/lib/haproxy/conf/os_edge_http_be.map)]

  default_backend openshift_default

##########################################################################
# END TLS SNI
##########################################################################

##########################################################################
# TLS NO SNI
#
# When we don't have SNI the only thing we can try to do is terminate the encryption
# using our wild card certificate.  Once that is complete we can either re-encrypt
# the traffic or pass it on to the backends
##########################################################################
# backend for when sni does not exist, or ssl term needs to happen on the edge
backend be_no_sni
  server fe_no_sni 127.0.0.1:10443 weight 1 send-proxy

frontend fe_no_sni
  # terminate ssl on edge
  bind 127.0.0.1:10443 ssl no-sslv3 crt /etc/pki/tls/private/tls.crt accept-proxy
  mode http

  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy

  # DNS labels are case insensitive (RFC 4343), we need to convert the hostname into lowercase
  # before matching, or any requests containing uppercase characters will never match.
  http-request set-header Host %[req.hdr(Host),lower]

  # check re-encrypt backends first - path or host based.
  acl reencrypt base,map_reg(/var/lib/haproxy/conf/os_reencrypt.map) -m found

  # Search from most specific to general path (host case).
  use_backend be_secure:%[base,map_reg(/var/lib/haproxy/conf/os_reencrypt.map)] if reencrypt

  # map to http backend
  # Search from most specific to general path (host case).
  # Note: If no match, haproxy uses the default_backend, no other
  #       use_backend directives below this will be processed.
  use_backend be_edge_http:%[base,map_reg(/var/lib/haproxy/conf/os_edge_http_be.map)]

  default_backend openshift_default

##########################################################################
# END TLS NO SNI
##########################################################################

backend openshift_default
  mode http
  option forwardfor
  #option http-keep-alive
  option http-pretend-keepalive

##-------------- app level backends ----------------


# Plain http backend but request is TLS, terminated at edge
backend be_edge_http:app1:nodejs-mongo-persistent
    
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)]
  cookie 58485f24207dcdc454777120d2d86420 insert indirect nocache httponly secure
  server pod:nodejs-mongo-persistent-1-5rslc:nodejs-mongo-persistent:10.129.2.11:8080 10.129.2.11:8080 cookie 172d221af5d32af6d9fdda147f9a9299 weight 256 check inter 5000ms
  server pod:nodejs-mongo-persistent-1-62rn4:nodejs-mongo-persistent:10.129.2.12:8080 10.129.2.12:8080 cookie 492ec6c1c0bea25f07311264b5097c08 weight 256 check inter 5000ms
  server pod:nodejs-mongo-persistent-1-7jrgq:nodejs-mongo-persistent:10.130.2.13:8080 10.130.2.13:8080 cookie be8747301898eabf725e7a29dfc258eb weight 256 check inter 5000ms
  server pod:nodejs-mongo-persistent-1-qcwpt:nodejs-mongo-persistent:10.130.2.14:8080 10.130.2.14:8080 cookie 1af876f665f4cfba56bd1297e359f930 weight 256 check inter 5000ms
  server pod:nodejs-mongo-persistent-1-wmdw5:nodejs-mongo-persistent:10.131.2.11:8080 10.131.2.11:8080 cookie e8eb4c09d25cdc099d7291949dfbb223 weight 256 check inter 5000ms
  server pod:nodejs-mongo-persistent-1-bwh9s:nodejs-mongo-persistent:10.131.2.12:8080 10.131.2.12:8080 cookie c31dc29f64bc5419ff47c35b24ff99f1 weight 256 check inter 5000ms

# Plain http backend
backend be_http:apptest:nodejs-mongo-persistent
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)]
  cookie cc40d07e37da48abd610948a27ec66e5 insert indirect nocache httponly
  server pod:nodejs-mongo-persistent-1-z78vx:nodejs-mongo-persistent:10.129.2.8:8080 10.129.2.8:8080 cookie aa451dcaddff19964ebcfc76d7d6da33 weight 256

# Secure backend, pass through
backend be_tcp:default:docker-registry
  balance source

  hash-type consistent
  timeout check 5000ms
  server pod:docker-registry-1-9gkjl:docker-registry:10.128.2.18:5000 10.128.2.18:5000 weight 256 check inter 5000ms
  server pod:docker-registry-1-7v2nn:docker-registry:10.130.0.13:5000 10.130.0.13:5000 weight 256 check inter 5000ms

# Secure backend, pass through
backend be_tcp:default:registry-console
  balance source

  hash-type consistent
  timeout check 5000ms
  server pod:registry-console-1-m2ltn:registry-console:10.129.0.12:9090 10.129.0.12:9090 weight 256

# Secure backend, pass through
backend be_tcp:kube-service-catalog:apiserver
  balance source

  hash-type consistent
  timeout check 5000ms
  server pod:apiserver-9qvqd:apiserver:10.128.0.9:6443 10.128.0.9:6443 weight 256 check inter 5000ms
  server pod:apiserver-slsp2:apiserver:10.129.0.16:6443 10.129.0.16:6443 weight 256 check inter 5000ms
  server pod:apiserver-l2qg8:apiserver:10.131.0.13:6443 10.131.0.13:6443 weight 256 check inter 5000ms

# Secure backend which requires re-encryption
backend be_secure:logging:logging-kibana
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)]
  cookie 670a6b528786908c0acd0b91d99e7604 insert indirect nocache httponly secure
  server pod:logging-kibana-1-5ptfq:logging-kibana:10.130.0.14:3000 10.130.0.14:3000 cookie 92d12c253504b220c88096820f6bf6b3 weight 256 ssl verify required ca-file /var/lib/haproxy/router/cacerts/logging:logging-kibana.pem

# Secure backend which requires re-encryption
backend be_secure:openshift-ansible-service-broker:asb-1338
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)]
  cookie 89a6d633054ded194d4e1360cdc1fbef insert indirect nocache httponly secure
  server pod:asb-1-pfgml:asb:10.128.2.17:1338 10.128.2.17:1338 cookie 8cec758f3f3399371f336f9a7aa4850b weight 256 ssl verifyhost asb.openshift-ansible-service-broker.svc verify required ca-file /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt

# Secure backend which requires re-encryption
backend be_secure:openshift-infra:hawkular-metrics
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)]
  cookie a054b5d9e987bf679f10c9d29be39478 insert indirect nocache httponly secure
  server pod:hawkular-metrics-s8rzw:hawkular-metrics:10.131.0.9:8443 10.131.0.9:8443 cookie 4775260e28380168685af8bf5684e35f weight 256 ssl verify required ca-file /var/lib/haproxy/router/cacerts/openshift-infra:hawkular-metrics.pem

# Secure backend which requires re-encryption
backend be_secure:openshift-metrics:alertmanager
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)]
  cookie 63e862426c28ebd55a0a9a1afbed8a69 insert indirect nocache httponly secure
  server pod:prometheus-0:alertmanager:10.130.0.17:10443 10.130.0.17:10443 cookie d4fdb7fc4f8b7450c78f0023ee696a2e weight 256 ssl verifyhost alertmanager.openshift-metrics.svc verify required ca-file /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt

# Secure backend which requires re-encryption
backend be_secure:openshift-metrics:alerts
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)]
  cookie 8e8f16e95a2a1b6adaeb492ff8744236 insert indirect nocache httponly secure
  server pod:prometheus-0:alerts:10.130.0.17:9443 10.130.0.17:9443 cookie 76d3571d816503b089d30c101eecc427 weight 256 ssl verifyhost alerts.openshift-metrics.svc verify required ca-file /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt

# Secure backend which requires re-encryption
backend be_secure:openshift-metrics:prometheus
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)]
  cookie f81241e3a913aa890fb02ba92a29f1be insert indirect nocache httponly secure
  server pod:prometheus-0:prometheus:10.130.0.17:8443 10.130.0.17:8443 cookie 5c2db5cb09b79ebf37e9bcd0da8f6f4b weight 256 ssl verifyhost prometheus.openshift-metrics.svc verify required ca-file /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt

# Plain http backend
backend be_http:smoke-test:nodejs-mongo-persistent
  mode http
  option redispatch
  option forwardfor
  balance leastconn

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)]
  cookie 7ed412827d503db50bace5c01ccf9c2a insert indirect nocache httponly
  server pod:nodejs-mongo-persistent-1-j4swb:nodejs-mongo-persistent:10.130.2.9:8080 10.130.2.9:8080 cookie 36d52354bf758f46afba8e639e8133c4 weight 256
